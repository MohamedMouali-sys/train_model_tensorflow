import numpy as np
import os
import cv2
from tqdm import tqdm
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tensorflow.keras.preprocessing.image import ImageDataGenerator
print("done")



X = []
y = []

# Define folder paths and corresponding labels
paths_labels = {
    'Colphocéphalie': 0,
    'Encéphalocèle': 1,
    'Hypoplasie_cérébelleuse': 2,
    'Kyste_arachnoïdien': 3,
    'Normal': 4,
    'Polencéphalie': 5,
    'Ventriculomégalie': 6,
}

for folder, label in paths_labels.items():
    path = f"/kaggle/input/dataset-kenza/data_train/{folder}"
    os.chdir(path)
    for i in tqdm(os.listdir()):
        img = cv2.imread(i)
        img = cv2.resize(img, (224, 224))
        X.append(img)
        y.append(label)

X = np.array(X) / 255.0  # Normalize
y = to_categorical(y, num_classes=7)



from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
print("done")


datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.2,
    horizontal_flip=True
)
train_gen = datagen.flow(X_train, y_train, batch_size=32)
print("done")



vgg = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze some layers
for layer in vgg.layers[:15]:
    layer.trainable = False
for layer in vgg.layers[15:]:
    layer.trainable = True

def create_model(bottom_model, num_classes):
    top_model = bottom_model.output
    top_model = GlobalAveragePooling2D()(top_model)
    top_model = Dense(1024, activation='relu')(top_model)
    top_model = BatchNormalization()(top_model)
    top_model = Dropout(0.5)(top_model)
    top_model = Dense(512, activation='relu')(top_model)
    top_model = BatchNormalization()(top_model)
    top_model = Dropout(0.3)(top_model)
    top_model = Dense(num_classes, activation='softmax')(top_model)
    return top_model

FC_Head = create_model(vgg, 7)
model = Model(inputs=vgg.input, outputs=FC_Head)



model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])
print("done")



reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.5, patience=3, verbose=1)
early_stop = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)
print("done")



history = model.fit(train_gen,
                    validation_data=(X_test, y_test),
                    epochs=50,
                    callbacks=[reduce_lr, early_stop])



model.save('/kaggle/working/maladie_classifier.h5')
print("done")




import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Make predictions
predictions = model.predict(X_test)

# Step 2: Convert predictions and true labels to class indices
predicted_classes = np.argmax(predictions, axis=1)

true_classes = np.argmax(y_test, axis=1)

# Step 3: Evaluate the model
print("✅ Classification Report:\n")
print(classification_report(true_classes, predicted_classes))

print("✅ Confusion Matrix:\n")
print(confusion_matrix(true_classes, predicted_classes))

# Optional: Class names
class_names = [
    'Colphocéphalie',
    'Encéphalocèle',
    'Hypoplasie_cérébelleuse',
    'Kyste_arachnoïdien',
    'Normal',
    'Polencéphalie',
    'Ventriculomégalie',
]

# Step 4: Visualize some predictions
for i in range(20):
    plt.imshow(X_test[i])
    plt.title(f"True: {class_names[true_classes[i]]} | Pred: {class_names[predicted_classes[i]]}")
    plt.axis('off')
    plt.show()
